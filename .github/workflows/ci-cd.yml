name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop/*, feature/* ]
  pull_request:
    branches: [ main, develop/* ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # Job 1: Lint & Code Quality
  # ============================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black mypy
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
        shell: pwsh

      - name: Run Black (code formatting check)
        run: |
          black --check --diff src/ dags/ || echo "Black formatting issues found (non-blocking)"
        continue-on-error: true

      - name: Run Flake8 (linting)
        run: |
          flake8 src/ dags/ --max-line-length=120 --exclude=__pycache__,*.pyc || echo "Flake8 issues found (non-blocking)"
        continue-on-error: true

      - name: Run MyPy (type checking)
        run: |
          mypy src/ --ignore-missing-imports || echo "MyPy type issues found (non-blocking)"
        continue-on-error: true

  # ============================================
  # Job 2: Unit Tests with Coverage
  # ============================================
  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest src/tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage reports
        continue-on-error: true
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Check coverage threshold
        run: |
          coverage report --fail-under=30
        continue-on-error: true

  # ============================================
  # Job 3: Build Docker Image
  # ============================================
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}

  # ============================================
  # Job 4: Integration Tests (Docker Compose)
  # ============================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images
        run: |
          docker compose -f docker/docker compose.yml build

      - name: Start services
        run: |
          docker compose -f docker/docker compose.yml up -d
          sleep 60  # Wait for Airflow to initialize

      - name: Check service health
        run: |
          docker compose -f docker/docker compose.yml ps
          curl -f http://localhost:8080/health || exit 1

      - name: Run integration tests
        run: |
          # Test DAG validation
          docker compose -f docker/docker compose.yml exec -T airflow-webserver \
            airflow dags list
          
          # Test DAG import
          docker compose -f docker/docker compose.yml exec -T airflow-webserver \
            python /opt/airflow/dags/brewery_pipeline.py

      - name: Tear down services
        if: always()
        run: |
          docker compose -f docker/docker compose.yml logs
          docker compose -f docker/docker compose.yml down -v

  # ============================================
  # Job 5: Security Scanning
  # ============================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-docker
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            bandit-report.json

  # ============================================
  # Job 6: Deploy to Staging (if main/develop)
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/develop/')
    environment:
      name: staging
      url: https://staging.brewery-pipeline.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # Add your staging deployment commands here
          # Examples:
          # - kubectl apply -f k8s/staging/
          # - aws ecs update-service ...
          # - terraform apply -var-file=staging.tfvars
          echo "âœ… Staging deployment complete"

  # ============================================
  # Job 7: Deploy to Production (if main + manual approval)
  # ============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://brewery-pipeline.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          # Add your production deployment commands here
          echo "âœ… Production deployment complete"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated production deployment
            Commit: ${{ github.sha }}
          draft: false
          prerelease: false

  # ============================================
  # Job 8: Notification
  # ============================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Send Slack notification
        if: always()
        continue-on-error: true
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        with:
          status: ${{ job.status }}
          text: 'Brewery Pipeline CI/CD: ${{ job.status }}'
