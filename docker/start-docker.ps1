# Script PowerShell para iniciar o ambiente Docker/Airflow
# Brewery Data Pipeline

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "üöÄ Brewery Pipeline - Docker Setup" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Verificar se Docker est√° instalado
Write-Host "üìã Verificando Docker..." -ForegroundColor Yellow
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker encontrado: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o encontrado! Por favor, instale o Docker Desktop." -ForegroundColor Red
    Write-Host "   Download: https://www.docker.com/products/docker-desktop" -ForegroundColor Yellow
    exit 1
}

# Verificar se Docker Compose est√° dispon√≠vel
Write-Host "üìã Verificando Docker Compose..." -ForegroundColor Yellow
try {
    $composeVersion = docker compose version
    Write-Host "‚úÖ Docker Compose encontrado: $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker Compose n√£o encontrado!" -ForegroundColor Red
    exit 1
}

# Navegar para o diret√≥rio docker
Set-Location -Path $PSScriptRoot
Write-Host "üìÇ Diret√≥rio atual: $(Get-Location)" -ForegroundColor Cyan

# Criar diret√≥rios necess√°rios
Write-Host ""
Write-Host "üìÅ Criando diret√≥rios necess√°rios..." -ForegroundColor Yellow
$directories = @(
    "../data/raw",
    "../data/bronze",
    "../data/silver", 
    "../data/gold",
    "./logs",
    "./plugins"
)

foreach ($dir in $directories) {
    if (-not (Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
        Write-Host "   ‚úÖ Criado: $dir" -ForegroundColor Green
    } else {
        Write-Host "   ‚è≠Ô∏è  J√° existe: $dir" -ForegroundColor Gray
    }
}

# Parar containers existentes
Write-Host ""
Write-Host "üõë Parando containers existentes..." -ForegroundColor Yellow
docker compose down 2>&1 | Out-Null

# Construir imagens
Write-Host ""
Write-Host "üî® Construindo imagens Docker..." -ForegroundColor Yellow
Write-Host "   (Isso pode levar alguns minutos na primeira vez)" -ForegroundColor Gray
docker compose build

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao construir imagens!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Imagens constru√≠das com sucesso!" -ForegroundColor Green

# Iniciar servi√ßos
Write-Host ""
Write-Host "üöÄ Iniciando servi√ßos..." -ForegroundColor Yellow
docker compose up -d

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao iniciar servi√ßos!" -ForegroundColor Red
    exit 1
}

# Aguardar inicializa√ß√£o
Write-Host ""
Write-Host "‚è≥ Aguardando inicializa√ß√£o dos servi√ßos (30 segundos)..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Verificar status
Write-Host ""
Write-Host "üìä Status dos containers:" -ForegroundColor Cyan
docker compose ps

# Informa√ß√µes finais
Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "‚úÖ Ambiente Docker iniciado!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üåê Acesse o Airflow Web UI:" -ForegroundColor Yellow
Write-Host "   URL: http://localhost:8080" -ForegroundColor White
Write-Host "   Username: airflow" -ForegroundColor White
Write-Host "   Password: airflow" -ForegroundColor White
Write-Host ""
Write-Host "üìã Comandos √∫teis:" -ForegroundColor Yellow
Write-Host "   Ver logs:        docker compose logs -f" -ForegroundColor White
Write-Host "   Parar servi√ßos:  docker compose down" -ForegroundColor White
Write-Host "   Reiniciar:       docker compose restart" -ForegroundColor White
Write-Host "   Status:          docker compose ps" -ForegroundColor White
Write-Host ""
